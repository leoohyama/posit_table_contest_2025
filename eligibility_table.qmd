---
author: "NWRI D Team"
date: last-modified
output-dir: docs/
format:
  html:
    self-contained: true
    toc: false
    toc-location: left
    toc-title: "Contents"
    page-layout: full
    toc-depth: 2
    toc-floating: true
editor: visual
execute:
  cache: false
  echo: false
  freeze: false
---

<style>
.ticker-wrap { width: 100%; overflow: hidden; background: #111; padding: 8px 0; }
.ticker { display: flex; flex-wrap: nowrap; }
.ticker-move { display: flex; flex-shrink: 0; animation: ticker-move 120s linear infinite; }
.item { flex: 0 0 auto; margin-right: 2rem; color: #0f0; font-family: monospace; font-size: 1.2em; }
@keyframes ticker-move { from { transform: translateX(0); } to { transform: translateX(-50%); } }
.item.pos  { color: #9CD15C; }
.item.neg  { color: #FA4616; }
.item.zero { color: grey; }
</style>

```{r setup, include=FALSE}

require(dplyr)
require(reactable)
require(reactablefmtr)
require(viridis)
require(wesanderson)
require(scales)
require(htmlwidgets)
require(htmltools)
require(stringr)
require(lubridate)
require(tidyr)
```

```{r, echo=FALSE, include=FALSE, warning=FALSE, cache=FALSE}

Gradeleveltabs<-readRDS("data/final_table2025-09-15.rds")
enroll_heat_week <-readRDS("heatmapdataweekly/heat_mapweekly2025-09-03.rds")


Gradeleveltabs_mixed <- Gradeleveltabs %>%
  mutate(
    # shuffle schools/districts
    district = sample(district, replace = FALSE),
    school = sample(school, replace = FALSE),
    DISTRICT_NAME = sample(DISTRICT_NAME, replace = TRUE),
    SCHOOL_NAME_LONG = sample(SCHOOL_NAME_LONG, replace = TRUE),

    # capacity with jitter
    n_total = round(n_total * runif(n(), 0.9, 1.2)),

    # eligible: a proportion of capacity, allow wide spread (50%–95%)
    n_eligible = round(n_total * runif(n(), 0.5, 0.95)),

    # enrolled: a proportion of eligible, allow wider spread (5%–90%)
    n_enrolled = ifelse(
      is.na(n_enrolled), NA,
      round(n_eligible * runif(n(), 0.05, 0.9)))
  )
numeric_cols <- setdiff(names(enroll_heat_week), "DISTRICT_NAME")

enroll_heat_week <- enroll_heat_week %>%
  mutate(
    DISTRICT_NAME = sample(DISTRICT_NAME, replace = FALSE),

    # inflate older weeks moderately (stay roughly same or slight increase)
    across(all_of(numeric_cols[1:(length(numeric_cols)-3)]),
           ~ round(.x * runif(1, 1.0, 1.3))),

    # for second-to-last week: allow increase or slight decrease
    `08-17` = round(`08-17` * runif(n(), 0.8, 1.6)),

    # for last week: allow bigger swing in both directions
    `08-24` = round(`08-24` * runif(n(), 0.5, 2.5))
  ) %>%
  rowwise() %>%
  mutate(total = sum(c_across(`06-22`:`08-24`))) %>%
  ungroup()


#make a list of schools under average enrollment but over average eligibility
#change any NAs for enrollment or eligible numbers to 0 and
#remove any schools where we have no data on total enrollment
Gradeleveltabs<-Gradeleveltabs |>
  mutate(n_enrolled = ifelse(is.na(n_enrolled), 0, n_enrolled),
         n_eligible = ifelse(is.na(n_eligible), 0, n_eligible))  |>
  filter(!is.na(n_total)) |>
  mutate(perc_enroll = n_enrolled/n_total,
         perc_eligible = n_eligible/n_total) |>
  filter(!perc_enroll > 1) |>
  rename(DistrictID = district,
         SchoolID = school)

orangefilter = Gradeleveltabs |>
  group_by(DistrictID, SchoolID) |>
  summarise(n_total = sum(n_total),
            n_eligible = sum(n_eligible),
            n_enrolled = sum(n_enrolled)) |>
  ungroup() |>
  mutate(perc_enroll = n_enrolled/n_total,
         perc_eligible = n_eligible/n_total)


# Step 1: Build summary table (1 row per school)
school_summary <- Gradeleveltabs |>
  group_by(DistrictID, SchoolID,DISTRICT_NAME, SCHOOL_NAME_LONG) |>
  summarize(avg_perc_eligible = mean(perc_eligible), total_n_eligible = sum(n_eligible),
            avg_perc_enroll = mean(perc_enroll), total_n_enroll = sum(n_enrolled),
            .groups = "drop") |>
  mutate(Priority = case_when(
    avg_perc_enroll <  mean(orangefilter$perc_enroll, na.rm = T) &
           avg_perc_eligible > mean(orangefilter$perc_eligible, na.rm = T) ~ "orange",
    TRUE ~ "Other"
  )) |>
  arrange(Priority)

#step 2 also build application data for timeline

school_summary2<-school_summary  |>
  mutate(priorit_col = case_when(
    Priority == "orange" ~ "orange",
    TRUE ~ 'grey'
  )) |>
   mutate(priorit_col2 = case_when(
    priorit_col == "orange" ~ "In orange square",
    priorit_col == "grey" ~ "Not in orange square"
  )) |>
  select(-c(Priority)) |>
  relocate(avg_perc_eligible, .after =total_n_eligible) |>
  relocate(avg_perc_enroll, .after = avg_perc_eligible) |>
  rename('School Type' = priorit_col2)  


```
**Table guide**:

Schools highlighted in [orange]{style="background-color: orange"} fall under the average enrollment and over the average eligibility percentages!
```{r, echo=FALSE, include=TRUE, warning=FALSE, cache=FALSE, message=FALSE}

#extract columns for most recent weeks
recent_weeks<-enroll_heat_week[,c(1,ncol(enroll_heat_week)-1, ncol(enroll_heat_week)-2)]

# compute raw and percent diffs
recent_weeks$raw_diff  <- recent_weeks[[3]] - recent_weeks[[2]]
recent_weeks$perc_diff <- round(100 * recent_weeks$raw_diff / recent_weeks[[2]], 1)

recent_weeks <- data.frame(
  ticker    = recent_weeks$DISTRICT_NAME,
  raw_diff  = recent_weeks$raw_diff,
  perc_diff = recent_weeks$perc_diff
)

recent_weeks <- recent_weeks |> drop_na(perc_diff)

# format with signs and build ticker items
ticker_items <- paste0(
  "<div class='item ",
  ifelse(recent_weeks$perc_diff > 0, "pos",
         ifelse(recent_weeks$perc_diff < 0, "neg", "zero")),
  "'>",
  recent_weeks$ticker, " ",
  ifelse(recent_weeks$perc_diff > 0, "+", 
         ifelse(recent_weeks$perc_diff < 0, "", "")), # add + sign only for positives
  recent_weeks$perc_diff, "% (",
  ifelse(recent_weeks$raw_diff > 0, "+", 
         ifelse(recent_weeks$raw_diff < 0, "", "")),
  recent_weeks$raw_diff, ")</div>",
  collapse = ""
)


```


```{r, echo=FALSE, include=TRUE, warning=FALSE, cache=FALSE, message=FALSE}
school_summary2 <- school_summary2 
district_level<-school_summary2 |>
  group_by(DISTRICT_NAME) |>
  summarise(total_eligible_d= sum(total_n_eligible),
            avg_eligiblity = mean(avg_perc_eligible),
             avg_enroll = mean(avg_perc_enroll)) |>
  drop_na(DISTRICT_NAME)

# make table 
tbl <- reactable(
  wrap = TRUE,defaultPageSize = 100,
  defaultSorted = 'total_eligible_d',defaultSortOrder = "desc",
  elementId = "school-table", highlight = TRUE,
  district_level,
  theme = slate(centered = T),

  onClick = "expand",
  #start identifying the columns in the first table
  columns = list(
    DISTRICT_NAME = colDef(name = "DISTRICT NAME",searchable = TRUE,filterable = TRUE),
    #average enrollment by district
    avg_enroll = colDef(align = "center",
      name = "Enrolled %",
      cell = data_bars(data = district_level, fill_color = "cyan",background = "black",
                       bar_height = 7, text_position = 'outside-end',text_color = "white",round_edges = TRUE,
                       number_fmt = scales::label_percent(accuracy = 0.1)),
      filterable = TRUE,
      filterMethod = htmlwidgets::JS("
        function(rows, columnId, filterValue) {
          return rows.filter(function(row) {
            const value = row.values[columnId];
            return value >= filterValue.min && value <= filterValue.max;
          });
        }
      "),
      filterInput = function(values, name) {
        min_val <- floor(min(values, na.rm = TRUE) * 100)
        max_val <- ceiling(max(values, na.rm = TRUE) * 100)
        id_min <- paste0('min-', name)
        id_max <- paste0('max-', name)
        label_id <- paste0('label-', name)
        
        htmltools::tags$div(
          htmltools::tags$span(id = label_id, paste0(min_val, "% – ", max_val, "%")),
          htmltools::tags$input(
            id = id_min,
            type = "range",
            min = min_val,
            max = max_val,
            value = min_val,
            step = 1,
            oninput = sprintf("
              const min = parseFloat(this.value);
              const max = parseFloat(document.getElementById('%s').value);
              document.getElementById('%s').innerText = min + '%% – ' + max + '%%';
              Reactable.setFilter('school-table', '%s', { min: min / 100, max: max / 100 });
            ", id_max, label_id, name),
            style = "accent-color: #3C8EAB; background-color: #9a905d; width: 100%; margin-bottom: 4px;"
          ),
          htmltools::tags$input(
            id = id_max,
            type = "range",
            min = min_val,
            max = max_val,
            value = max_val,
            step = 1,
            oninput = sprintf("
              const max = parseFloat(this.value);
              const min = parseFloat(document.getElementById('%s').value);
              document.getElementById('%s').innerText = min + '%% – ' + max + '%%';
              Reactable.setFilter('school-table', '%s', { min: min / 100, max: max / 100 });
            ", id_min, label_id, name),
            style = "accent-color: #2883AD; background-color: #9a905d; width: 100%;"
          )
        )
      }
    ),
    #average eligibility by district
    avg_eligiblity = colDef(align = "center",
      name = "Eligible %", 
      format = colFormat(digits = 1, percent = TRUE), 
      filterable = TRUE,
      style = list(
    color = "white",
    fontWeight = "bold"
  ),
      filterMethod = htmlwidgets::JS("
        function(rows, columnId, filterValue) {
          return rows.filter(function(row) {
            const value = row.values[columnId];
            return value >= filterValue.min && value <= filterValue.max;
          });
        }
      "),
      filterInput = function(values, name) {
        min_val <- floor(min(values, na.rm = TRUE) * 100)
        max_val <- ceiling(max(values, na.rm = TRUE) * 100)
        id_min <- paste0('min-', name)
        id_max <- paste0('max-', name)
        label_id <- paste0('label-', name)
        
        htmltools::tags$div(
          htmltools::tags$span(id = label_id, paste0(min_val, "% – ", max_val, "%")),
          htmltools::tags$input(
            id = id_min,
            type = "range",
            min = min_val,
            max = max_val,
            value = min_val,
            step = 1,
            oninput = sprintf("
              const min = parseFloat(this.value);
              const max = parseFloat(document.getElementById('%s').value);
              document.getElementById('%s').innerText = min + '%% – ' + max + '%%';
              Reactable.setFilter('school-table', '%s', { min: min / 100, max: max / 100 });
            ", id_max, label_id, name),
            style = "width: 100%; margin-bottom: 4px;"
          ),
          htmltools::tags$input(
            id = id_max,
            type = "range",
            min = min_val,
            max = max_val,
            value = max_val,
            step = 1,
            oninput = sprintf("
              const max = parseFloat(this.value);
              const min = parseFloat(document.getElementById('%s').value);
              document.getElementById('%s').innerText = min + '%% – ' + max + '%%';
              Reactable.setFilter('school-table', '%s', { min: min / 100, max: max / 100 });
            ", id_min, label_id, name),
            style = "width: 100%;"
          )
        )
      }
    ),
    #total eligible students by district
    total_eligible_d = colDef(align = "center",
      name = "Eligible Students",
      cell = color_tiles(bold_text = TRUE,opacity = 0.7,brighten_text = FALSE,
                         text_color = "white",
            data = district_level,
            colors = wes_palette("Zissou1", 100, type = "continuous"),
            number_fmt = scales::comma
          ),
      format = colFormat(separators = TRUE),
      filterable = TRUE,
      filterMethod = htmlwidgets::JS("
        function(rows, columnId, filterValue) {
          return rows.filter(function(row) {
            const value = row.values[columnId];
            return value >= filterValue.min && value <= filterValue.max;
          });
        }
      "),
      filterInput = function(values, name) {
        min_val <- floor(min(values, na.rm = TRUE))
        max_val <- ceiling(max(values, na.rm = TRUE))
        id_min <- paste0('min-', name)
        id_max <- paste0('max-', name)
        label_id <- paste0('label-', name)
        
        htmltools::tags$div(
          htmltools::tags$span(id = label_id, paste0(min_val, " – ", max_val)),
          htmltools::tags$input(
            id = id_min,
            type = "range",
            min = min_val,
            max = max_val,
            value = min_val,
            step = 1,
            oninput = sprintf("
              const min = parseInt(this.value);
              const max = parseInt(document.getElementById('%s').value);
              document.getElementById('%s').innerText = min + ' – ' + max;
              Reactable.setFilter('school-table', '%s', { min: min, max: max });
            ", id_max, label_id, name),
            style = "width: 100%; margin-bottom: 4px;"
          ),
          htmltools::tags$input(
            id = id_max,
            type = "range",
            min = min_val,
            max = max_val,
            value = max_val,
            step = 1,
            oninput = sprintf("
              const max = parseInt(this.value);
              const min = parseInt(document.getElementById('%s').value);
              document.getElementById('%s').innerText = min + ' – ' + max;
              Reactable.setFilter('school-table', '%s', { min: min, max: max });
            ", id_min, label_id, name),
            style = "width: 100%;"
          )
        )
      }
    )
  ), #end list cols for first table
  
  #filter by index for specific schools within a district
   details = function(index) {
    district <- district_level$DISTRICT_NAME[index]
    detail_data <- school_summary2 |> filter(DISTRICT_NAME == district)|>
      select(-c("School Type","SchoolID","DISTRICT_NAME"))
    
    #start of the first nested table
    reactable(defaultPageSize = 20,
       defaultSorted = 'total_n_eligible',defaultSortOrder = "desc",
      elementId = "school_nested-table",
      theme = nytimes(centered = TRUE, header_font_size = 16,font_color = "black"),
      wrap = TRUE,
      detail_data, 
      fullWidth = T,
      style = list(width = "100%"),
      defaultColDef = colDef(align = "center"),
      #start columns for the first nested table here
      columns = list(
      DistrictID = colDef(show = FALSE),
      priorit_col = colDef(show = FALSE),
      #school name column
      SCHOOL_NAME_LONG = colDef(name = "School", searchable = T, filterable = T,
                     cell = color_tiles(data = detail_data, color_ref = 'priorit_col')),
      #total eligible students by school here
      total_n_eligible = colDef(sortable = T,
      name = "Eligible Students",
      aggregate = "sum",
      format = colFormat(separators = TRUE),
      filterable = TRUE,
      filterMethod = htmlwidgets::JS("
        function(rows, columnId, filterValue) {
          return rows.filter(function(row) {
            const value = row.values[columnId];
            return value >= filterValue.min && value <= filterValue.max;
          });
        }
      "),
      filterInput = function(values, name) {
        min_val <- floor(min(values, na.rm = TRUE))
        max_val <- ceiling(max(values, na.rm = TRUE))
        id_min <- paste0('min-', name)
        id_max <- paste0('max-', name)
        label_id <- paste0('label-', name)

        htmltools::tags$div(
          htmltools::tags$span(id = label_id, paste0(min_val, " – ", max_val)),
          htmltools::tags$input(
            id = id_min,
            type = "range",
            min = min_val,
            max = max_val,
            value = min_val,
            step = 1,
            oninput = sprintf("
              const min = parseInt(this.value);
              const max = parseInt(document.getElementById('%s').value);
              document.getElementById('%s').innerText = min + ' – ' + max;
              Reactable.setFilter('school_nested-table', '%s', { min: min, max: max });
            ", id_max, label_id, name),
            style = "accent-color: #3C8EAB; background-color: #9a905d; width: 100%; margin-bottom: 4px;"
          ),
          htmltools::tags$input(
            id = id_max,
            type = "range",
            min = min_val,
            max = max_val,
            value = max_val,
            step = 1,
            oninput = sprintf("
              const max = parseInt(this.value);
              const min = parseInt(document.getElementById('%s').value);
              document.getElementById('%s').innerText = min + ' – ' + max;
              Reactable.setFilter('school_nested-table', '%s', { min: min, max: max });
            ", id_min, label_id, name),
            style = "accent-color: #3C8EAB; background-color: #9a905d;width: 100%;"
          )
        )
      }
    ),
   #eligible students percent by school here
     avg_perc_eligible = colDef(sortable = T,
      name = "Eligible %",
      format = colFormat(digits = 1, percent = TRUE),
      filterable = TRUE,
      filterMethod = htmlwidgets::JS("
        function(rows, columnId, filterValue) {
          return rows.filter(function(row) {
            const value = row.values[columnId] * 100;
            return value >= filterValue.min && value <= filterValue.max;
          });
        }
      "),
      filterInput = function(values, name) {
        min_val <- floor(min(values, na.rm = TRUE)*100)
        max_val <- ceiling(max(values, na.rm = TRUE)*100)
        id_min <- paste0('min-', name)
        id_max <- paste0('max-', name)
        label_id <- paste0('label-', name)
        
        htmltools::tags$div(
          htmltools::tags$span(id = label_id, paste0(min_val, "% – ", max_val, "%")),
          htmltools::tags$input(
            id = id_min,
            type = "range",
            min = min_val,
            max = max_val,
            value = min_val,
            step = 1,
            oninput = sprintf("
              const min = parseInt(this.value);
              const max = parseInt(document.getElementById('%s').value);
              document.getElementById('%s').innerText = min + '%% – ' + max+ '%%';
              Reactable.setFilter('school_nested-table', '%s', { min: min, max: max });
            ", id_max, label_id, name),
            style = "accent-color: #3C8EAB; background-color: #9a905d;width: 100%; margin-bottom: 4px;"
          ),
          htmltools::tags$input(
            id = id_max,
            type = "range",
            min = min_val,
            max = max_val,
            value = max_val,
            step = 1,
            oninput = sprintf("
              const max = parseInt(this.value);
              const min = parseInt(document.getElementById('%s').value);
              document.getElementById('%s').innerText = min + '%% – ' + max+ '%%';
              Reactable.setFilter('school_nested-table', '%s', { min: min, max: max });
            ", id_min, label_id, name),
            style = "accent-color: #3C8EAB; background-color: #9a905d;width: 100%;"
          )
        )
      }
    ),
      #enrolled students percent by school here
      avg_perc_enroll = colDef(sortable = T,
      name = "Enrolled %",
      format = colFormat(digits = 1, percent = TRUE),
      aggregate = "mean",
      filterable = TRUE,
      filterMethod = htmlwidgets::JS("
        function(rows, columnId, filterValue) {
          return rows.filter(function(row) {
            const value = row.values[columnId]* 100;
            return value >= filterValue.min && value <= filterValue.max;
          });
        }
      "),
      filterInput = function(values, name) {
        min_val <- floor(min(values, na.rm = TRUE)*100)
        max_val <- ceiling(max(values, na.rm = TRUE)*100)
        id_min <- paste0('min-', name)
        id_max <- paste0('max-', name)
        label_id <- paste0('label-', name)
        
        htmltools::tags$div(
          htmltools::tags$span(id = label_id, paste0(min_val, "% – ", max_val, "%")),
          htmltools::tags$input(
            id = id_min,
            type = "range",
            min = min_val,
            max = max_val,
            value = min_val,
            step = 1,
            oninput = sprintf("
              const min = parseInt(this.value);
              const max = parseInt(document.getElementById('%s').value);
              document.getElementById('%s').innerText = min + '%% – ' + max+ '%%';
              Reactable.setFilter('school_nested-table', '%s', { min: min, max: max });
            ", id_max, label_id, name),
            style = "accent-color: #3C8EAB;background-color: #9a905d; width: 100%; margin-bottom: 4px;"
          ),
          htmltools::tags$input(
            id = id_max,
            type = "range",
            min = min_val,
            max = max_val,
            value = max_val,
            step = 1,
            oninput = sprintf("
              const max = parseInt(this.value);
              const min = parseInt(document.getElementById('%s').value);
              document.getElementById('%s').innerText = min + '%% – ' + max+ '%%';
              Reactable.setFilter('school_nested-table', '%s', { min: min, max: max });
            ", id_min, label_id, name),
            style = "accent-color: #3C8EAB; background-color: #9a905d;width: 100%;"
          )
        )
      }
      
    ),
   #total students by school here
    total_n_enroll = colDef(name = "No. Enrolled Students",sortable = T,
      
    )
    ), #end of column list for nested table 
     details = function(index){
    school <- detail_data$SCHOOL_NAME_LONG[index]
    District_id <- detail_data$DistrictID[index]
    detail_data1 <- Gradeleveltabs |> filter(SCHOOL_NAME_LONG == school & DistrictID == District_id) |>
      select(-c(DISTRICT_NAME, SCHOOL_NAME_LONG, DistrictID, SchoolID,n_enrolled, n_total)) |>
      relocate(perc_eligible, .before = n_eligible) |>
            relocate(perc_enroll, .before = perc_eligible)

    reactable(
      wrap = TRUE,
      detail_data1,
      #start list of columns
      columns = list(
        grade = colDef(name = "Grade", width = 80, align = "center"),
        #number of eligible students
        n_eligible = colDef(
          name = "No. of Eligible Students",
          format = colFormat(digits = 0, separators = TRUE),
          cell = data_bars(
            fill_color = 'black',
            background = '#FFFFFF',
            bar_height = 7,
            text_position = 'outside-end',
            max_value = max(detail_data1$n_eligible),
            data = detail_data1
          )
        ),
        #percent eligible
        perc_eligible = colDef(
          name = "% Eligible by Grade",
          format = colFormat(digits = 1),
          align = "left",
          width = 100,
          cell = color_tiles(
            data = detail_data1,
            number_fmt = scales::label_percent(accuracy = 0.1),
            colors = wes_palette("Zissou1", 100, type = "continuous")
          )),
        #percent enroll
          perc_enroll = colDef(
          name = "% Enrolled by Grade",
          format = colFormat(digits = 1),
          align = "left",
          width = 100,
          cell = color_tiles(
            data = detail_data1,
            number_fmt = scales::label_percent(accuracy = 0.1),
            colors = wes_palette("Zissou1", 100, type = "continuous")
          )
        )
      
      )
      )
    
    
  },
   height = 600,
  bordered = TRUE,
      highlight = TRUE,
      resizable = TRUE,
      sortable = FALSE
    ) #end of the first nested table
    
  } #end of the first nested table function
  #beginning of final grade by grade table here:
  
) 

# external title 
title <- div(
  style = "text-align:center; color:black;
           font-size:22px; font-weight:bold;
           margin:10px 0 15px 0;",
  HTML("Enrollment &amp; Eligibility across Florida Schools 
        <img src='images/NWRI_Logo_blue_orange.png' 
             alt='New Worlds Reading' width='225' height='125'> 
        <img src='images/LCLearning_Primary RGB.png' 
             alt='Learning Logo' width='350' height='100'>")
)

# ticker HTML
ticker <- HTML(paste0('
<div class="ticker-wrap">
  <div class="ticker">
    <div class="ticker-move">
      ', ticker_items, ' ', ticker_items, '
    </div>
  </div>
</div>
'))

# put them in exact order: subtitle → ticker → table
tagList(
  title,
  ticker,
  tbl
)
```


